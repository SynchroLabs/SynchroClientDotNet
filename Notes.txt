
Mobile Application As A Service (MAAAS) - Client
=================================================


Controls - 

    Windows:

        http://msdn.microsoft.com/en-us/library/windows/apps/hh465351.aspx

    Comparison between Windows and Windows Phone:

        http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj735581(v=vs.105).aspx

    Comparison between iOS and Android:

        http://kintek.com.au/blog/portkit-ux-metaphor-equivalents-for-ios-and-android/


    Implemented 
    ======================================

    !!! TODO - 

    Table (aka Grid, like HTML table, rows/colums, typically not data bound)

        Win/WinPhone - Grid
        Android - 
            TableLayout ?
            GridLayout - http://android-developers.blogspot.com/2011/11/new-layout-widgets-space-and-gridlayout.html
                Requires v11 (4.0/ICS) or v7 support library
        iOS - Ouch!

    WrapPanel

        Win/WinPhone - WrapPanel
        Android - FlowLayout - from here: http://forums.xamarin.com/discussion/comment/156
            Also - http://slodge.blogspot.no/2013/01/an-mono-for-android-wrappanelflowlayout.html
        iOS -  UICollectionViewFlowLayout?

    GridView (flowing, scrolling grid) - Ideally support either data bound or explicit contents
        Win/WinPhone/Android - GridView
        iOS - UICollectionViewFlowLayout

        Attributes:
            item
            selectionItem

        Bindings:
            items
            selection
            onItemClick (command)

    !!! A GridView is really just a WrapPanel where every item is the same size.  Review use cases and functionality of platform
        controls and see if we can combine this into a single concept/implementation.



    Not Implemented Yet
    ========================

        !!! Survey controls on all platforms to make complete list (especially Android/iOS)

	    Checkbox/radio buttons

	    Date/time

	    Flip view

	    Flyout (not really a control)

	    Grid / VariableSizeWrapGrid (child elements have row/col properties)

		    { type: "grid", columns: [100, 100], rows: [50, 50], contents: [
		        { type: "text", value: "Somevalue", row: 1, column: 1 },
		    ] };

	    GridView

	    Hub

	    Media

	    Progress bar

	    Progress ring

	    Semantic zoom

	    Windows contracts?  Sharing, settings, search...

        Stepper (up/down)
            iOS - UIStepper
            No other platform has a control / standard (just use side-by-side buttons of appropriate style)


Client


    Transaction synchronization, "waiting" indicator (if > .5 seconds maybe), retry if fails?

    Set icon, title, supported orientation (maybe dynamic - only portrait on phone, only landscape on tab?)
    Deploy on all devices for demo

    Store/restore state as required (should just be client cookie/id and current page so can re-load as needed)
        - Requires persistent client state mechanism on server

    Look at perf (especially on iOS - maybe just related to console logging)

    Investigate initial image load issue on Android (DNS failure?), WinPhone (sim only?)

    View/resource caching

    WebSocket support on WinPhone

Server

    Test on iPad, Android tab (Nexus 7, Kindle Fire)

    Implement PropertyCross

Misc

    Separate binding ability of ARGB elements would be a neat parlor trick (maybe later)

    List stuff
        Need to make sure list element lifecycle is properly managed (that bound children are removed)
        Need to recycle views on platforms that support it (future?)
        Android is too agressive about recycling (maybe) - in propery cross list images load as scrolled (even ones previously loaded)

    Custom font names (platform-specific), weights (other than bold, per platform)?

================================================================================

Margin/Padding layout stuff
------------------------------------

Win/WinPhone

    http://msdn.microsoft.com/en-us/library/ms751709(v=vs.110).aspx

    Margin - Supported on all elements via Margin property and Margin.Left/Right/Top/Bottom for setting individual values
    Padding - Only supported on certain elements (Block, Border, Control, Textblock)

    To add padding to StackPanel, we put a StackPanel inside of a Border - tested and working

Android

    http://developer.android.com/reference/android/view/View.html

    Padding - Supported by all elements (views) via PaddingLeft/PaddingRight/PaddingTop/PaddingBottom properties
    Margin - Supported in children of ViewGroup elements via ViewGroup.MarginLayoutParams

    Margin and padding tested and working in StackPanel and Border

iOS

    Margin and padding tested and working in StackPanel and Border (implemented from scratch)

    !!! Padding for controls that support it natively via ContentInset/ContentEdgeInset?  Override padding properties in derived control wrappers?

=======================

Everything should have margin, and Border/StackPanel (at least) should obey them
Border and StackPanel should have padding 

Containers

    ListView (can ignore margin/padding)
    StackPanel
    Border
    ScrollView
    Canvas (can ignore padding, child margins)


Dynamic sizing
    Win - 
        Layout logic - http://msdn.microsoft.com/en-us/library/ms745058(v=vs.110).aspx
        FrameworkElement.MeasureOverride()

        FrameworkElement.Height/Width must be Double.NaN (which is the default) for autosizing to work
        FrameworkElement.HorizontalAlignment/VerticalAlignment must also be "Stretch" (which is the default), for autosizing to work

        In a panel with a single child, Double.NaN/Stretch works in either dimension (scrollview should be the same)
        In a stackpanel, with multiple children, autosizing only works perpendicular to the layout (so items in a vertical stack panel can
        auto-size to the width of the panel, but not the height, which kind of makes sense)

        For Grid: http://msdn.microsoft.com/en-us/library/system.windows.gridunittype(v=vs.110).aspx (GridLength/GridUnitType)

        If stackpanel size is fixed (or known)
          For each dimension:
            If child dimension is: *
               Set to min-size (or 0, if none)
               Size (or compute size) of stackpanel in dimension
               Subtract size from maximum/actual size, compute remainder
               Divide remainder between * items (respecting min/max for each)

        For vertical stackpanel, use grid with row definitions
            If item width is * -> item horizontal alignment is stretch
            If item height is * -> row height is * (also vertical alignment stretch?)
        For horizontal stackpanel, use grid with column definitions
            If item width is * -> column width is * (also horizontal alignment stretch?)
            If item height is * -> item vertical alignment is stretch

    Android - concept of "weight" (at least in some panels)

        No WrapPanel, but some comparable "FlowLayout" solutions: http://slodge.blogspot.no/2013/01/an-mono-for-android-wrappanelflowlayout.html

        For Android LinearLayout (StackPanel equiv)
          Item "Gravity" - individual item alignment, including stretch h/v
            Use stretch alignment for perpendicular to orientation Star sizing, for example:
              If horizontal layout and item height is *, set item gravity to fill_vertical
          Weight - If non-zero, portion of extra space (weight divided by weight-sum, as with * sizing in Windows Grid)
            Use weight for parallel to orientation Star sizing, for example:
              If horizontal layout and item width is *, set item weight to 1 (or x for x*)


        Note: In Android, both Border and StackPanel containers are implemented as LinearLayout

        http://developer.android.com/guide/topics/ui/declaring-layout.html

        android.view.ViewGroup.LayoutParams (height, width)
            android.view.ViewGroup.MarginLayoutParams (adds margins)
                android.widget.LinearLayout.LayoutParams (add gravity, weight)
                android.widget.RelativeLayout.LayoutParams (ListView item only, vertical centering, layout with checkbox if specified)
	        android.widget.AbsoluteLayout.LayoutParams (adds x, y - Canvas only)
            android.widget.AbsListView.LayoutParams (adds viewType - ListView item only)


For each dimension, possible values:

    Wrap (default)
    Fill
    Explicit

    If Wrap or Fill, also consider:
        min
        max

    What about:
        star value means fill parent, unspecified means wrap content


=======================

Device features
   Location
   Photo picker / camera
   Maps
   Phone/SMS (?)
   "Built-in" apps - FB/Twitter/etc

=======================

Misc
-------
Scroll to top of page on transition (Windows, at least)
Default margin (all)
Control sizing when not specified (especially iOS/Android) - review
Text - if width specified and height not specified, should wrap, grow vertically, as required
Control sizing - fill to height/width, less margin?


========================================

{ control: "stackpanel", orientation: "Vertical", contents: [
    { control: "text", value: "Caption", fontsize: 10, width: 140, foreground: "Red" },
    { control: "rectangle", height: 100, width: 100, fill: "Green" },
    ]
},

=========================================

Containers: 
    Single: ScrollView, Border
    Multiple: StackPanel, Grid (to be implemented)

Every control is contained in some other control, except the top level control, which is owned by the "page" (and is sized explicitly to the available page size)

Document top level control logic (Depends on whether your top level "elements" attribute has more than one child? Always get the scroller?)

Every control needs to be aligned in their parent
    Horizontal:  Left, Center, Right, Stretch ("fill_horizontal" on Android) - document defaults (verify)
    Vertical: Top, Center, Right, Stretch ("fill_vertical" on Android) - document defaults (verify)

Every control has a size (height/width)
    If dimension unspecified, and control is itself a container, which has contents, considered "wrap_content" (otherwise?  0?)
    If dimension is Star (* or n*), then ... (fill_parent?)

Every control may have margins (in all four directions), which must be obeyed (by parent)

Control min/max size (do we even need this concept?)

For containers that can contain multiple controls, need way to allocate flexible size between them
    Star sizing (Windows) and Layout weight (Android) indicate proportion of allocation of "extra" space
    Windows also has a concept of Auto (divide "extra" space proportionately based on size of contents)

For stack panel, alignment makes sense in the opposite dimension as orientation -
    For example, in a vertical stack panel each item might horizontally aligned left, center, right, or stretch,
    but in the vertical dimension (the dimension in which the items are "stacked"), alignment makes no sense.  The
    exception to this would be for a "stretch" alignment / star sizing (where you aren't using alignment to specify
    where the control should fit within the available space, you're just indicating that you want extra space, and
    the control is going to consume all of it).

==========================================

{ control: "stackpanel", width: "*", height: "*", margin: { top: 10, left: 10, right: 10 }, orientation: "Vertical", contents: [
    { control: "text", value: "Caption", fontsize: 10, foreground: "Red" },
    { control: "rectangle", height: "*", width: "*", fill: "Green" },
    ]
},

