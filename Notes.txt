
Mobile Application As A Service (MAAAS) - Client
=================================================

Binding token directives - work on $parent (needs to get to the actual containing object context in one jump)

Command parameters

Navigation with parameters (passed to IntitialzeViewModelState?)

List bindings
    "items" - context for list of items - should be an array
    "item"  - binding for individual list item (be default, just array element - $data?)
    "selection" - need to be able to specify an item id context (?) - need to be able to r/t selection - selectionId (?) - if empty, use list element value

    Look at how updates are mananger - if not simple string array contents, may want to manage like ListView

ListView
    "items" binding
    "itemTemplate" - layout description for each item 

    How do we track/restore selection state (has to be easily serializeable)?  Using an "id" attribute in the itemTemplate?

        selectionId: "itemId" <default>
        itemTemplate --> itemId: "{someValue}" (defaults to $index?)
            - By defaulting to "index" the default selected binding value would just be an int or array of ints representing the position
              of selected items (matching the array indexes, so reasonably meaningful on the server side, at least as a default)

        We'd need to make a property binding for itemId and store that somewhere (ElementMetaData) so we could match it back up when getting/setting the selection list

        We could have a mode where the objects themselves get reported as the selected items (this might be nice for binding, so for example, I could bind to a property
        of the currently selected item).  You could combine this with a "uniqueIdProperty" to use for restoring selection, failing that, just compare objects (?).


Rebinding

    The problem is that bindings are established using the tokens from the viewmodel.  So it is currently
    impossible to create a binding for which the token doesn't exist (and this same issue would be a problem
    when any intermeidate binding context isn't represented by a token).

	If "resolved binding" (taking into consideration the binding context, which can include binding tokens) exists
	at the time of initial binding, a valid path can be constructed.  If not, this binding would have to be 
	re-attempted each time the client view model changes (from the server?) to see if the binding can then be
	established.  Do we really need to support that (binding contexts that aren't available in the initial state)?

        - What if a control binds to an item that is not present on the origina view model, but shows up later?
        - What if a control binds to an item on the view model, and that item goes away later?
	
	Investigate maintaining path/parentage on replaced tokens.
	How do binding tokens ($root, $parent, etc) fit in to this?

	For array bindings, update repeated items (remove all and re-add?), use stored template to create items (?)

On server 
    Persistent client state
        Use cookies?  homegrown cookie-like method?.  Needs to work with any driver.
    Cache
        View cache - negotiate view cache state so that server knows whether you need a given view or have it
    Hotloading (test for new, later will always load/hotload as needed)

Property binding expressions/directives:

	Negation using !, such as visibility="{!isVisible}"
	One time using ^

    Real expression support:

		Mathematical (240 - charCount)
		Logical (charCount >= 240)
		Type conversion (str(240 - charCount))

Controls - http://msdn.microsoft.com/en-us/library/windows/apps/hh465351.aspx

	AppBar/CommandBar and buttons (app bar button for round app bar buttons that can be used anywhere)

	Border

	Canvas (child elements have positioning properties)

		{ type: "canvas", contents: [
		    { type: "text", value: "Somevalue", top: 10, left: 25 },
		] };

	Checkbox/radio buttons

	Dropdown combo

	Date/time

	Flip view

	Flyout (not really a control)

	Grid / VariableSizeWrapGrid (child elements have row/col properties)

		{ type: "grid", columns: [100, 100], rows: [50, 50], contents: [
		    { type: "text", value: "Somevalue", row: 1, column: 1 },
		] };

	GridView/ListView

	Hub

	Media

	Progress bar / slider (both "range" controls with similar interface)

	Progress ring

	Semantic zoom

	Web view

	Windows contracts?  Sharing, settings, search...
